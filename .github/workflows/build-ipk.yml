#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Blog: https://helmiau.com
# HelmiWrt by helmiau.com
# Script base by P3TERX
#=================================================

name: Build IPK

on:
  workflow_dispatch:
    inputs:
      branch:
        type: choice
        description: Select ImmortalWrt Branch.
        required: true
        default: openwrt-21.02
        options: 
        - master
        - openwrt-21.02
        - openwrt-18.06
        - openwrt-18.06-k5.4
      platform:
        type: choice
        description: Select device platform.
        required: true
        default: bcm27xx/bcm2711
        options: 
        - armvirt/32
        - armvirt/64
        - bcm27xx/bcm2708
        - bcm27xx/bcm2709
        - bcm27xx/bcm2710
        - bcm27xx/bcm2711
#        - ramips/mt7620
#        - ramips/mt7621
#        - ramips/mt76x8
#        - ramips/rt288x
#        - ramips/rt305x
#        - ramips/rt3883
        - rockchip/armv8
        - sunxi/cortexa53
        - sunxi/cortexa7
#        - sunxi/cortexa8
        - x86/64
        - x86/generic
#        - x86/geode
#        - x86/legacy

env:
  CONFIG_FILE: build-ipk/universal.config
  UPLOAD_RELEASE: true
  TZ: Asia/Jakarta
  THIS_REPO_NAME: ${{ github.event.repository.name }}
  THIS_REPO_BRANCH: ${{ github.event.repository.default_branch }}
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: ${{ github.event.inputs.branch }}
  DIY_SH: build-ipk/immortalwrt.sh

jobs:
  Build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install rdate squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: Clone Source Code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd /workdir/openwrt
          export REPO_BRANCH=$REPO_BRANCH
          echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
          export PLATFORM="$(echo '${{ github.event.inputs.platform }}')"
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo $PWD)" >> $GITHUB_OUTPUT

#      - name: Load Custom Feeds
#        run: |
#          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
#          chmod +x $DIY_P1_SH
#          cd openwrt
#          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Install Feeds
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          cd $OPENWRT_ROOT_PATH
          chmod +x $GITHUB_WORKSPACE/build-ipk/*.sh
          $GITHUB_WORKSPACE/$DIY_SH

      - name: Download Package
        id: package
        run: |
          cd $OPENWRT_ROOT_PATH
          make defconfig
          make download -j64

      - name: Compile Packages
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          # make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          # yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.COMPILE_STATUS == 'success' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE/openwrt/bin/packages
          # Delete Firewall IPK
          find . -type f -name 'luci-app-firewall*' | while read FILE ; do
            rm -f ${FILE} ;
          done
          # Checking all IPK's location
          find . -type f -name 'luci-app-*' | while read FILE ; do
            echo -e "helmilog:: luci app and theme located at $(readlink -f ${FILE})" ;
          done
          # Set LuCI Theme and App Path
          echo "LUCITHEMEPATH=$GITHUB_WORKSPACE/openwrt/bin/packages/$PLATFORM/base/luci-theme" >> $GITHUB_ENV
          echo "LUCIAPPPATH=$GITHUB_WORKSPACE/openwrt/bin/packages/$PLATFORM/base/luci-app" >> $GITHUB_ENV
          echo "PKGPATH=$GITHUB_WORKSPACE/openwrt/bin/packages/$PLATFORM/base/packages" >> $GITHUB_ENV
          # Checking Files and places
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo -e "===== End of Information ====="
          echo -e "FILE_DATE is ....... $FILE_DATE"
          echo -e "OPENWRT_ROOT_PATH is ....... $TARGET"
          echo -e "PLATFORM is ....... $PLATFORM"
          echo -e "TARGET is ....... $TARGET"
          echo -e "FIRMWARE is ....... $FIRMWARE"
          echo -e "===== End of Information ====="
          echo "status=success" >> GITHUB_OUTPUT
          echo "ORGANIZE_STATUS=success" >> GITHUB_OUTPUT

      - name: Generate New Release Tag
        run: |
          sleep 10
          echo "release_tag=ipk" >> GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> GITHUB_OUTPUT

      - name: Upload HelmiWrt Packages to GitHub Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: false
          name: IPK Build ${{ env.FILE_DATE }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ env.LUCITHEMEPATH }}-*
            ${{ env.LUCIAPPPATH }}-*
            ${{ env.PKGPATH }}/mactoiface.*
          body: |
            **HelmiWrt LuCI App and Theme IPK for OpenWrt**
            THESE PACKAGES IS COOLSNOWWOLF LEDE FIRMWARE BASED !!!!! NOT OFFICIAL OPENWRT BASE !!!!
            DWYOR (DO WITH YOUR OWN RISK)
            [Donation here](https://www.helmiau.com/pay/index_en.html) â€¢ [Installation Tutorial](https://www.google.com/search?q=helmiau.com+helmiwrt+packages)

      - name: Delete Workflow Runs
        if: steps.tag.outputs.status == 'success' && !cancelled()
        uses: GitRML/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 3
          keep_minimum_runs: 5
