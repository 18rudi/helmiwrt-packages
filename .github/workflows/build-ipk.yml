#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Blog: https://helmiau.com
# HelmiWrt by helmiau.com
# Script base by P3TERX
#=================================================

name: Build IPK

on:
  workflow_dispatch:
  schedule:
    - cron: 0 17 * * *

env:
  TOOLCHAIN_TAG: toolchain
  TOOLCHAIN_NAME: toolchain-immortalwrt-immortalwrt-openwrt-21.02-bcm27xx-bcm2711.img
  CONFIG_FILE: build-ipk/universal.config
  UPLOAD_RELEASE: true
  TZ: Asia/Jakarta
  THIS_REPO_NAME: ${{ github.event.repository.name }}
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: 21.02
  DIY_SH: scripts/immortalwrt.sh

jobs:
  Build:
    runs-on: ubuntu-20.04

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install rdate squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          docker image prune -a -f
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$(echo $CURRENT_BRANCH)" >> $GITHUB_OUTPUT

      - name: Combine Disks
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE/tmp
          chmod 777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp
          df -hT $GITHUB_WORKSPACE
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Checkout
        run: |
          cd $GITHUB_WORKSPACE
          git init
          git config --global credential.helper store
          git remote add origin https://$GITHUB_REPOSITORY_OWNER:${{ secrets.HELMIWRT_RW }}@github.com/$GITHUB_REPOSITORY
          git fetch
          git checkout -t origin/$CURRENT_BRANCH

      - name: Prepare Toolchain Image From Releases
        run: |
          mkdir -p workspace
          cd workspace
          for i in {0..9}
          do
            curl -fsL https://github.com/HelmiWrt-OS-Immortal/releases/download/toolchain/toolchain-immortalwrt-immortalwrt-openwrt-$SOURCE_BRANCH-bcm27xx-bcm2711.img.0$i >> $TOOLCHAIN_IMAGE.img || break
          done
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd $OPENWRT_ROOT_PATH
          git pull

      - name: Install Feeds
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          chmod +x ../build-ipk/*.sh

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          chmod +x $GITHUB_WORKSPACE/build-ipk/*.sh
          $GITHUB_WORKSPACE/build-ipk/$DIY_SH

      - name: Download Package
        id: package
        run: |
          cd $OPENWRT_ROOT_PATH
          make defconfig
          make download -j64

      - name: Compile Packages
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.COMPILE_STATUS == 'success' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE/openwrt/bin/packages
          # Delete Firewall IPK
          find . -type f -name 'luci-app-firewall*' | while read FILE ; do
            rm -f ${FILE} ;
          done
          # Checking all IPK's location
          #find . -type f -name 'luci-*' | while read FILE ; do
            #echo -e "helmilog:: luci app and theme located at $(readlink -f ${FILE})" ;
          #done
          # Set LuCI Theme and App Path
          echo "LUCITHEMEPATH=$GITHUB_WORKSPACE/openwrt/bin/packages/$PLATFORM/base/luci-theme" >> $GITHUB_ENV
          echo "LUCIAPPPATH=$GITHUB_WORKSPACE/openwrt/bin/packages/$PLATFORM/base/luci-app" >> $GITHUB_ENV
          echo "PKGPATH=$GITHUB_WORKSPACE/openwrt/bin/packages/$PLATFORM/base/packages" >> $GITHUB_ENV
          # Checking Files and places
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo -e "===== End of Information ====="
          echo -e "FILE_DATE is ....... $FILE_DATE"
          echo -e "OPENWRT_ROOT_PATH is ....... $TARGET"
          echo -e "PLATFORM is ....... $PLATFORM"
          echo -e "TARGET is ....... $TARGET"
          echo -e "FIRMWARE is ....... $FIRMWARE"
          echo -e "===== End of Information ====="
          echo "status=success" >> GITHUB_OUTPUT
          echo "ORGANIZE_STATUS=success" >> GITHUB_OUTPUT

      - name: Generate New Release Tag
        id: tag
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          sleep 10
          echo "release_tag=ipk" >> GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> GITHUB_OUTPUT

      - name: Upload HelmiWrt Packages to GitHub Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: false
          name: IPK Build ${{ env.FILE_DATE }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ env.LUCITHEMEPATH }}-*
            ${{ env.LUCIAPPPATH }}-*
            ${{ env.PKGPATH }}/mactoiface.*
          body: |
            **HelmiWrt LuCI App and Theme IPK for OpenWrt**
            THESE PACKAGES IS COOLSNOWWOLF LEDE FIRMWARE BASED !!!!! NOT OFFICIAL OPENWRT BASE !!!!
            DWYOR (DO WITH YOUR OWN RISK)
            [Donation here](https://www.helmiau.com/pay/index_en.html) â€¢ [Installation Tutorial](https://www.google.com/search?q=helmiau.com+helmiwrt+packages)

      - name: Delete Workflow Runs
        if: steps.tag.outputs.status == 'success' && !cancelled()
        uses: GitRML/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 3
          keep_minimum_runs: 5
